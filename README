l'idée c'est : 
    - je parse le code en utilisant ocamllex et menhir, ça en vrai, ça n'a pas tant d'importance que ça par rapport à l'objectif du TIPE mais c'est une étape nécessaire
    ocamllex : lex le code, je définis mes regex et mes tokens et ça s'occupe de transformer ma chaine de caractère en liste de tokens
    menhir : je parse le code, je définis ma grammaire, ici simplifié, l'objecif n'est pas de refaire tout C, et ça transforme ma liste de tokens en AST
    la structure de l'AST est définie dans ast.ml

    - j'analyse mon AST, bon comme je l'ai dit, à l'origine je voulais le transformer en problème SAT/SMT car c'est de là que vient l'idée de mon TIPE 
    mais j'avais du mal à comprendre comment le faire
    Donc, parce qu'il fallait quand même que je fasse quelque chose, j'ai eu l'idée de créer des hashtables qui a chaque variable associe un couple maximum minimum.

    L'analyse se fait ainsi : 
        - Pour des déclarations de variable, on crée un nouvel élément dans la hashtable en suivant ces règles : 
            
            let rec bound_expr h expr = 
            match expr with
            |Num(i) -> i,i 
            |Var(var) |Array(var) -> Hashtbl.find h var
            |BinOpE(op, expr1, expr2) ->
                let min1, max1 = bound_expr h expr1 
                and min2, max2 = bound_expr h expr2 in
                (match op with
                |Add -> (min1 + min2, max1 + max2)
                |Sub -> (min1 - max2, max1 - min2)
                |Mul -> (min1 * min2, max1 * max2)
                |Div -> (min1 / max2, max1 / min2)
        
        - Pour les boucles, j'ai décidé de manière assez arbitraire que les variables n'aient le droit qu'à des progressions arithmétiques
        On aurait peut être pu faire un autre choix mais celui-ci nous permet de faire une seule fois l'analyse dans la boucle puis de multiplier la différence par le nombre d'itération de la boucle
        J'ai aussi supposé que les boucles étaient du type "for (int i = 0; i < CONST; i++)" de telle sorte que le nombre d'itération de la boucle soit calculable simplement, c'est juste CONST

        - Pour les if, pour simplifier les choses, je ne cherche pas à savoir si la condition est réalisé donc je suppose toujours que oui, il suffit donc de faire l'analyse dans le if 

    Ainsi mon algo il prend en entrée mon AST et donne en sortie une hashtable avec des estimation des maximums et minimum que les variables peuvent atteindre pendant l'exécution
    A partir de ça c'est très simple, je fais : 
    
        Hashtbl.iter bound_to_type h
        
        let bound_to_type var (var_min, var_max) =
        print_string var;
        print_string " : ";
        if -128 <= var_min && var_max <= 127 then 
            print_string "int_8"
        else 
            if -32768 <= var_min && var_max <= 32767 then 
            print_string "int_16"
            else
            print_string "int_32";
        print_newline ()

    Ensuite, je modifie manuellement dans mon code d'origine les types de variables avec ces résultats
    J'aurai pu l'automatiser, mais c'est en fait un peu compiqué (j'ai perdu pas mal de temps à essayer de le coder sans succès)
    De toute manière, le temps d'exécution pour modifier automatiquement les types aurait surement est négligeable devant le reste


Là ce que je voudrais faire, et en vrai je pense que ça c'est presque bon c'est terminer avec les hashtables puis trouver deux codes c sur lesquels j'ai des résultats intéressants.
Genre un, créé spécifiquement pour que les résultats de mon algo montre qu'on peut gagner du temps en faisant de l'inférence de type
Et un autre plus générique qui montre que dans le cadre général, ça ne marche pas vraiment (parce qu'en vrai il y a de forte chance que ce soit ça la conclusion de mon TIPE)
Et si on a du temps, implémenter la méthode originale par résolution de pb SAT/SMT